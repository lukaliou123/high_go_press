# HighGoPress 微服务配置
# Phase 2 Day 1

# 服务发现配置
discovery:
  type: "consul"
  consul:
    address: "localhost:8500"
    scheme: "http"
    timeout: "10s"

# Gateway 网关配置
gateway:
  server:
    host: "0.0.0.0"
    port: 8080
    mode: "release" # debug, release, test
  timeout:
    read: "30s"
    write: "30s"
    idle: "120s"
  cors:
    enabled: true
    origins: ["*"]

# Counter 计数服务配置
counter:
  server:
    host: "0.0.0.0"
    port: 9001
  grpc:
    max_recv_msg_size: 4194304
    max_send_msg_size: 4194304
    max_connections: 1000
    keep_alive:
      time: "60s"
      timeout: "10s"
  performance:
    worker_pool_size: 1000
    object_pool_enabled: true
    batch_size: 100

# Analytics 分析服务配置  
analytics:
  server:
    host: "0.0.0.0"
    port: 9002
  grpc:
    max_recv_msg_size: 4194304
    max_send_msg_size: 4194304
    max_connections: 500
    keep_alive:
      time: "60s"
      timeout: "10s"

# Redis 配置
redis:
  address: "localhost:6380"
  password: ""
  db: 0
  pool_size: 20
  min_idle_conns: 5
  max_retries: 3
  dial_timeout: "5s"
  read_timeout: "3s"
  write_timeout: "3s"

# Kafka 配置
kafka:
  mode: "real"  # 使用真实Kafka进行测试
  brokers: ["localhost:9092"]
  topic: "counter-events"
  producer:
    batch_size: 16384
    linger_ms: 10
    buffer_memory: 33554432
  consumer:
    group_id: "high_go_press_analytics"
    auto_offset_reset: "earliest"

# 日志配置
log:
  level: "info" # debug, info, warn, error
  format: "json" # json, console
  output: "stdout" # stdout, file
  file:
    path: "/var/log/high-go-press"
    max_size: 100 # MB
    max_age: 7 # days
    max_backups: 10

# 服务器配置（用于Gateway）
server:
  host: "localhost"
  port: 8080
  mode: "debug"

# 监控配置
monitoring:
  # pprof 性能分析
  pprof:
    enabled: true
    port: 6060
    
  # Prometheus 指标收集
  prometheus:
    enabled: true
    port: 2112
    path: "/metrics"
    namespace: "highgopress"
    subsystem: ""
    enable_system: true
    enable_business: true
    enable_db: true
    enable_cache: true
    collection_interval: "15s"
    
  # 健康检查
  health_check:
    enabled: true
    port: 8090
    path: "/health"
    interval: "30s"
    timeout: "5s"
    
  # 指标配置
  metrics:
    # HTTP 指标
    http:
      enabled: true
      buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
      
    # gRPC 指标
    grpc:
      enabled: true
      buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
      
    # 业务指标
    business:
      enabled: true
      buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
      
    # 数据库指标
    database:
      enabled: true
      buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]
      
    # 缓存指标
    cache:
      enabled: true
      buckets: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5]
      
  # 系统指标收集
  system:
    enabled: true
    collection_interval: "15s"
    cpu_enabled: true
    memory_enabled: true
    goroutine_enabled: true
    gc_enabled: true

# 错误处理和重试配置
resilience:
  # 熔断器配置
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    success_threshold: 3
    timeout: "30s"
    max_requests: 10
    stat_window: "60s"
  
  # 重试配置
  retry:
    enabled: true
    max_attempts: 3
    initial_backoff: "100ms"
    max_backoff: "30s"
    backoff_multiplier: 2.0
    jitter: 0.1
    timeout: "60s"
    retryable_codes:
      - "UNAVAILABLE"
      - "DEADLINE_EXCEEDED"
      - "RESOURCE_EXHAUSTED"
      - "ABORTED"
      - "INTERNAL"
  
  # 降级配置
  fallback:
    enabled: true
    strategy: "cache" # cache, default, static, alternative
    cache_ttl: "5m"
    timeout: "1s"
    trigger_conditions:
      - type: "error_rate"
        threshold: 0.5
        time_window: "1m"
  
  # 错误处理配置
  error_handling:
    enabled: true
    stats_window: "5m"
    error_rate_threshold: 0.1
    log_level: "error" 